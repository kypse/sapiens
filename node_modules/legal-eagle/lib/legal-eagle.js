(function() {
  var BSD3LicenseText, MITLicenseText, PermissiveLicenses, UnlicenseText, basename, existsSync, extend, extname, extractLicense, extractLicenseFromDirectory, extractLicenseFromReadme, extractLicenseFromReadmeFile, extractRepository, findLicenses, isBSDLicense, isMITLicense, isUnlicense, join, licenseFromText, mungeLicenseName, normalizeLicenseText, omitPermissiveLicenses, readFileSync, readIfExists, readInstalled, readdirSync, size, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  readInstalled = require('read-installed');

  _ref = require('underscore'), size = _ref.size, extend = _ref.extend;

  _ref1 = require('path'), basename = _ref1.basename, extname = _ref1.extname, join = _ref1.join;

  _ref2 = require('fs'), existsSync = _ref2.existsSync, readdirSync = _ref2.readdirSync, readFileSync = _ref2.readFileSync;

  module.exports = function(options, cb) {
    var omitPermissive, overrides, path;
    path = options.path, overrides = options.overrides, omitPermissive = options.omitPermissive;
    return readInstalled(path, null, function(err, packageData) {
      var licenseSummary;
      if (err != null) {
        return cb(err);
      }
      try {
        licenseSummary = overrides != null ? overrides : {};
        findLicenses(licenseSummary, packageData, path);
        if (omitPermissive) {
          omitPermissiveLicenses(licenseSummary);
        }
        return cb(null, licenseSummary);
      } catch (_error) {
        err = _error;
        return cb(err);
      }
    });
  };

  findLicenses = function(licenseSummary, packageData, path) {
    var data, dependencies, dependencyPath, engines, entry, id, name, version, _results;
    if (typeof packageData === 'string') {
      return;
    }
    name = packageData.name, version = packageData.version, dependencies = packageData.dependencies, engines = packageData.engines;
    id = "" + name + "@" + version;
    if (!existsSync(path)) {
      return;
    }
    if (licenseSummary[id] == null) {
      entry = {
        repository: extractRepository(packageData)
      };
      extend(entry, extractLicense(packageData, path));
      licenseSummary[id] = entry;
      if (size(dependencies) > 0) {
        _results = [];
        for (name in dependencies) {
          data = dependencies[name];
          dependencyPath = join(path, 'node_modules', name);
          _results.push(findLicenses(licenseSummary, data, dependencyPath));
        }
        return _results;
      }
    }
  };

  extractRepository = function(_arg) {
    var repository;
    repository = _arg.repository;
    if (typeof repository === 'object') {
      repository = repository.url.replace('git://github.com', 'https://github.com').replace('.git', '');
    }
    return repository;
  };

  extractLicense = function(_arg, path) {
    var license, licenses, readme, result, result_dir, _ref3, _ref4;
    license = _arg.license, licenses = _arg.licenses, readme = _arg.readme;
    if ((licenses != null ? licenses.length : void 0) > 0) {
      if (license == null) {
        license = licenses[0];
      }
    }
    if (license && (license.type != null)) {
      license = license.type;
    }
    if (Object.prototype.toString.call(license) === '[object Array]') {
      license = license[0];
    }
    result_dir = extractLicenseFromDirectory(path, license);
    if (result_dir && result_dir['license']) {
      return result_dir;
    } else if (license != null) {
      license = mungeLicenseName(license);
      result = {
        license: license,
        source: 'package.json'
      };
      if (result_dir && result_dir['sourceText']) {
        result['sourceText'] = result_dir['sourceText'];
      }
      return result;
    } else if (readme && readme !== 'ERROR: No README data found!') {
      return (_ref3 = extractLicenseFromReadme(readme)) != null ? _ref3 : {
        license: 'UNKNOWN'
      };
    } else {
      return (_ref4 = extractLicenseFromReadmeFile(path)) != null ? _ref4 : {
        license: 'UNKNOWN'
      };
    }
  };

  mungeLicenseName = function(license) {
    if (!license) {
      return;
    }
    if (license.match(/[\s(]*BSD-.*/)) {
      return 'BSD';
    } else if (license.match(/[\s(]*Apache.*/)) {
      return 'Apache';
    } else if (license.match(/[\s(]*ISC.*/)) {
      return 'ISC';
    } else if (license.match(/[\s(]*MIT.*/)) {
      return 'MIT';
    } else if (license === 'WTFPL') {
      return 'WTF';
    } else if (license.match(/[\s(]*unlicen[sc]e/i)) {
      return 'Unlicense';
    } else if (license.match(/[\s(]*CC-BY(-\d(\.\d)*)?/i)) {
      return 'CC-BY';
    } else if (license.match(/[\s(]*Public Domain/i)) {
      return 'Public Domain';
    } else if (license.match(/[\s(]*LGPL(-.+)*/)) {
      return 'LGPL';
    } else if (license.match(/[\s(]*[^L]GPL(-.+)*/)) {
      return 'GPL';
    } else {
      return license;
    }
  };

  extractLicenseFromReadme = function(readme) {
    var license;
    if (readme == null) {
      return;
    }
    license = readme.indexOf('MIT') > -1 ? 'MIT' : readme.indexOf('BSD') > -1 ? 'BSD' : readme.indexOf('Apache License') > -1 ? 'Apache' : readme.indexOf('DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE') > -1 ? 'WTF' : readme.indexOf('Unlicense') > -1 || readme.indexOf('UNLICENSE') > -1 ? 'Unlicense' : readme.toLocaleLowerCase().indexOf('public domain') > -1 ? 'Public Domain' : void 0;
    if (license != null) {
      return {
        license: license,
        source: 'README',
        sourceText: readme
      };
    }
  };

  extractLicenseFromReadmeFile = function(path) {
    var error, license, readmeFilename, readmeFiles, _i, _len;
    try {
      readmeFiles = readdirSync(path).filter(function(child) {
        var name;
        name = basename(child, extname(child));
        return name.toLowerCase() === 'readme';
      });
    } catch (_error) {
      error = _error;
      return;
    }
    for (_i = 0, _len = readmeFiles.length; _i < _len; _i++) {
      readmeFilename = readmeFiles[_i];
      if (license = extractLicenseFromReadme(readIfExists(join(path, readmeFilename)))) {
        return license;
      }
    }
  };

  extractLicenseFromDirectory = function(path, expected) {
    var f, license, licenseFileName, licenseText, noticesText, potentialLicense, potentialLicenseFileName, potentialLicenseText, _i, _len, _ref3;
    noticesText = '';
    _ref3 = readdirSync(path);
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      f = _ref3[_i];
      if (f.match(/(licen[s|c]e|copying)/i) && !f.match(/\.(docs|json|html)$/i)) {
        potentialLicenseText = readIfExists(join(path, f));
        potentialLicenseFileName = f;
        potentialLicense = licenseFromText(potentialLicenseText);
        if (expected && potentialLicense && (expected.toLowerCase().indexOf(potentialLicense.toLowerCase()) !== -1)) {
          licenseFileName = f;
          licenseText = potentialLicenseText;
          license = potentialLicense;
        }
      }
      if (f.match(/notice/i)) {
        noticesText = noticesText + readIfExists(join(path, f)) + '\n\n';
      }
    }
    if (licenseFileName == null) {
      licenseFileName = potentialLicenseFileName;
    }
    if (licenseText == null) {
      licenseText = potentialLicenseText;
    }
    if (noticesText) {
      licenseText = noticesText + licenseText;
    }
    if (license == null) {
      license = potentialLicense || expected;
    }
    license = mungeLicenseName(license);
    if (licenseText == null) {
      return;
    }
    return {
      license: license,
      source: licenseFileName,
      sourceText: licenseText
    };
  };

  licenseFromText = function(licenseText) {
    if (licenseText.indexOf('Apache License') > -1) {
      return 'Apache';
    } else if (isMITLicense(licenseText)) {
      return 'MIT';
    } else if (isBSDLicense(licenseText)) {
      return 'BSD';
    } else if (isUnlicense(licenseText)) {
      return 'Unlicense';
    } else if (licenseText.indexOf('The ISC License') > -1) {
      return 'ISC';
    } else if (licenseText.indexOf('GNU LESSER GENERAL PUBLIC LICENSE') > -1) {
      return 'LGPL';
    } else if (licenseText.indexOf('GNU GENERAL PUBLIC LICENSE') > -1) {
      return 'GPL';
    } else if (licenseText.toLocaleLowerCase().indexOf('public domain') > -1) {
      return 'Public Domain';
    }
  };

  readIfExists = function(path) {
    if (existsSync(path)) {
      return readFileSync(path, 'utf8');
    }
  };

  normalizeLicenseText = function(licenseText) {
    return licenseText.replace(/\s+/gm, ' ').replace(/\s+$/m, '').replace(/\.$/, '').trim();
  };

  MITLicenseText = "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE".replace(/\s+/gm, ' ');

  isMITLicense = function(licenseText) {
    var normalizedLicenseText, startIndex;
    if (licenseText.indexOf('MIT License') > -1) {
      return true;
    } else {
      startIndex = licenseText.indexOf('Permission is hereby granted');
      if (startIndex > -1) {
        normalizedLicenseText = normalizeLicenseText(licenseText.slice(startIndex));
        return normalizedLicenseText === MITLicenseText;
      } else {
        return false;
      }
    }
  };

  BSD3LicenseText = "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE".replace(/\s+/gm, ' ');

  isBSDLicense = function(licenseText) {
    var normalizedLicenseText, startIndex;
    if (licenseText.indexOf('BSD License') > -1) {
      return true;
    } else {
      startIndex = licenseText.indexOf('Redistribution and use');
      if (startIndex > -1) {
        normalizedLicenseText = normalizeLicenseText(licenseText.slice(startIndex));
        return normalizedLicenseText === BSD3LicenseText;
      } else {
        return false;
      }
    }
  };

  UnlicenseText = "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\n\nIn jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>".replace(/\s+/gm, ' ');

  isUnlicense = function(licenseText) {
    var normalizedLicenseText, startIndex;
    if (licenseText.indexOf('Unlicense') > -1) {
      return true;
    } else {
      startIndex = licenseText.indexOf('This is free and unencumbered software');
      if (startIndex > -1) {
        normalizedLicenseText = normalizeLicenseText(licenseText.slice(startIndex));
        return normalizedLicenseText === UnlicenseText;
      } else {
        return false;
      }
    }
  };

  PermissiveLicenses = ['MIT', 'BSD', 'Apache', 'WTF', 'LGPL', 'LGPL-2.0', 'LGPL-3.0', 'ISC', 'Artistic-2.0', 'Unlicense', 'CC-BY', 'Public Domain'];

  omitPermissiveLicenses = function(licenseSummary) {
    var license, name, _results;
    _results = [];
    for (name in licenseSummary) {
      license = licenseSummary[name].license;
      if (__indexOf.call(PermissiveLicenses, license) >= 0) {
        _results.push(delete licenseSummary[name]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
